##### 数据采集


##### 1.网站流量日志数据获取

      1.网站日志文件
        数据从无到有的采集,如何把用户的访问行为记录下来,变成我们的网站访问日志
     
        网站的Web服务器,能够自带日志记录的功能,可以简单便捷的手机一些基础的属性信息
     
        常见的Web服务器 (tomcat nginx )
     
        优点: 自带功能不需要配置就可以使用
        缺点: 收集的信息确定,而且不利于维护,收集的信息不够完整全面
     
      2.埋点 JavaScript收集
     
        在待采集数据的页面上,预先置入一段JavaScript代码,当用户的某种行为满足Js的执行条件
        触发Js执行,在执行过程中进行数据采集工作
     
        目标:不影响用户的正常浏览体验作为标准,数据采集分析锦上添花
     
        好处:可以根据业务需求定制化收集的属性信息,在不影响用户浏览体验的情况下进行更多数据的收集
        
##### 2.跨域问题
      跨域的本质为了限制JS的请求不安全,是针对JS的限制
     
      在页面收集领域,通常采用以请求图片的形式绕开所谓的跨域问题
     
      以伪装成请求图片的形式,把收集到的数据以参数的形式拼接在我们请求图片URL的后面
     
      从而把收集到的数据传递到指定的服务器上去
     
      为了降低请求的图片对页面视觉干扰,把图片定义为11像素的
     
      埋点JS代码实现自定义收集用户数据
     
      1.JS和HTML页面耦合在一起不利于后续的JS维护
      2.把JS单独提取处理变成一个文件,然后通过SRC属性引入,进行解耦合
     
      一台服务器身兼多职压力过大,降低服务器请求压力
      单独的去部署服务器,专门用于采集请数据的请求,可能会产生跨域问题(限制JS跨域的数据发送)
      以请求图片的形式,把采集的数据拼接成图片的参数,绕开JS跨域问题

##### 3.日志格式
    考虑日志中字段之间的分隔符问题,以有利于考虑后续程序处理数据方便为最高标准
    常见的分隔符有  制表符 空格 符号  \001

#### 4.日志切分
    nginx默认把日志一直写在一个文件中access.log 不利于后续的维护移动操作处理
    通过shell脚本给nginx进程发送urs1 信号,告知其重载配置文件
    在重载配置文件的时候,重新打开一个新的日志文件,在配合crontab 定时器
    从而完成间接通过时间控制滚动